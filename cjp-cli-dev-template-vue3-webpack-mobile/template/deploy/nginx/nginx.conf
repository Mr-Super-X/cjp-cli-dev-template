# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

# 指定 Nginx 服务进程的运行用户为 nginx，使得 Nginx 在运行时以非特权用户的身份工作，减少潜在的安全风险
user nginx;
# 自动配置工作进程的数量，这里的 auto 表示由 Nginx 自动选择合适的工作进程数量来处理请求，以最大化性能
worker_processes auto;
# 指定 Nginx 错误日志的位置。在 /var/log/nginx/error.log 文件中记录 Nginx 的错误和警告信息，用于故障排除和日常运维
error_log /var/log/nginx/error.log;
# 指定 Nginx 主进程的 PID 文件位置。主进程的 PID 被写入 /run/nginx.pid 文件中，这样可以方便地管理和监控 Nginx 进程
pid /run/nginx.pid;

# events块配置影响 Nginx 服务器与用户的网络连接
events {
    # 每个进程允许最大并发数
    worker_connections 1024;
}

# http块主要用于配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置
http {
    # 引入 MIME 类型配置文件，该文件定义了文件扩展名和对应的 MIME 类型，帮助 Nginx 在处理请求时正确识别和处理不同类型的文件
    include             /etc/nginx/mime.types;
    # 引入其他配置文件 default.conf，这种方式可以使配置文件模块化，方便管理和维护
    include             /etc/nginx/http-config/default.conf;
    # 引入另一个配置文件 https.conf，可能包含了与 HTTPS 相关的配置项，同样是为了模块化和管理的目的
    include             /etc/nginx/http-config/https.conf;
    # 设置客户端请求体的最大允许大小。使用环境变量 .Env.NGINX_CLIENT_MAX_BODY_SIZE 来动态配置，如果未设置则默认为 "10m"（10 MB）。这是为了限制客户端可以上传的数据大小，防止恶意或意外的大量数据上传对服务器造成负担
    client_max_body_size {{ default .Env.NGINX_CLIENT_MAX_BODY_SIZE "10m" }};

    # 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块
    server {
        # 禁用对响应内容的 gzip 压缩。在这里，设置为 off 表示不对输出的内容进行压缩处理，适用于某些情况下不希望或不需要压缩的场景
        gzip off;
        # 监听80端口，default_server标识将当前的 server 块设置为默认服务器，处理所有未被其他具体 server_name 匹配的请求
        listen       80 default_server;
        # 指定监听 IPv6 的所有地址 [::] 和 IPv4 的所有地址 0.0.0.0 上的 80 端口，default_server标识将当前的 server 块设置为默认服务器，处理所有未被其他具体 server_name 匹配的请求
        listen       [::]:80 default_server;
        # server_name 设置为 _，表示这个虚拟主机会匹配任意主机名。这样配置的目的是处理所有没有被具体指定的主机名的请求
        server_name  _;
        # 设置服务器的根目录为 html，这意味着服务器会从 /path/to/nginx/html 目录（具体路径根据实际情况而定）提供静态文件
        root         html;

        # 处理根路径 / 下的请求。如果请求的文件不存在 (!-e $request_filename)，则重写请求到环境变量 .Env.NGINX_FE_PREFIX 指定的前端路径下的 index.html 页面
        location / {
            index index.html index.htm;
            if (!-e $request_filename) {
                rewrite ^(.*)$ {{ .Env.NGINX_FE_PREFIX }}/index.html last;
                break;
            }
        }

        # 后端服务代理
        # 匹配以 .Env.NGINX_FE_PREFIX 环境变量值开头的路径 /tm/ 的请求，并通过 proxy_pass 将这些请求代理到 .Env.NGINX_BE_SERVICE_HOSTNAME 指定的后端服务
        location ~ ^{{ .Env.NGINX_FE_PREFIX }}/tm/ {
            proxy_pass {{ .Env.NGINX_BE_SERVICE_HOSTNAME }};
            rewrite ^{{ .Env.NGINX_FE_PREFIX }}/tm/(uaa|usrc|msgc|docc|cmc|portal|abic-admin)/(.*)$ /services/am-$1/$1/$2 break;
        }

        # 后端 bpm 服务代理
        # 匹配以 .Env.NGINX_FE_PREFIX 环境变量值开头的路径 /tm/bpm/ 的请求，并通过 proxy_pass 将这些请求代理到 .Env.NGINX_BE_SERVICE_HOSTNAME 指定的另一个后端服务
        location ~ ^{{ .Env.NGINX_FE_PREFIX }}/tm/bpm/ {
            proxy_pass {{ .Env.NGINX_BE_SERVICE_HOSTNAME }};
            rewrite ^{{ .Env.NGINX_FE_PREFIX }}/tm/bpm/(.*)$ /services/am-flowc/flowc/$1 break;
        }

        # 引入缓存策略的配置文件，该文件定义了服务器响应的缓存规则，帮助提升性能和效率
        include /etc/nginx/server-config/cache.conf;
        # 引入错误页面配置文件，定义了服务器在发生错误时展示的错误页面，提升用户体验和调试能力
        include /etc/nginx/server-config/error.conf;
    }
}
